// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XDECISION_H
#define XDECISION_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xdecision_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XDecision_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XDecision;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XDecision_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XDecision_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XDecision_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XDecision_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XDecision_Initialize(XDecision *InstancePtr, u16 DeviceId);
XDecision_Config* XDecision_LookupConfig(u16 DeviceId);
int XDecision_CfgInitialize(XDecision *InstancePtr, XDecision_Config *ConfigPtr);
#else
int XDecision_Initialize(XDecision *InstancePtr, const char* InstanceName);
int XDecision_Release(XDecision *InstancePtr);
#endif

void XDecision_Start(XDecision *InstancePtr);
u32 XDecision_IsDone(XDecision *InstancePtr);
u32 XDecision_IsIdle(XDecision *InstancePtr);
u32 XDecision_IsReady(XDecision *InstancePtr);
void XDecision_EnableAutoRestart(XDecision *InstancePtr);
void XDecision_DisableAutoRestart(XDecision *InstancePtr);
u32 XDecision_Get_return(XDecision *InstancePtr);

void XDecision_Set_reset_A_V(XDecision *InstancePtr, u32 Data);
u32 XDecision_Get_reset_A_V(XDecision *InstancePtr);
void XDecision_Set_reset_V_V(XDecision *InstancePtr, u32 Data);
u32 XDecision_Get_reset_V_V(XDecision *InstancePtr);
void XDecision_Set_reset_params_V(XDecision *InstancePtr, u32 Data);
u32 XDecision_Get_reset_params_V(XDecision *InstancePtr);
void XDecision_Set_athresh(XDecision *InstancePtr, u32 Data);
u32 XDecision_Get_athresh(XDecision *InstancePtr);
void XDecision_Set_vthresh(XDecision *InstancePtr, u32 Data);
u32 XDecision_Get_vthresh(XDecision *InstancePtr);
void XDecision_Set_a_flip(XDecision *InstancePtr, u32 Data);
u32 XDecision_Get_a_flip(XDecision *InstancePtr);
void XDecision_Set_v_flip(XDecision *InstancePtr, u32 Data);
u32 XDecision_Get_v_flip(XDecision *InstancePtr);
void XDecision_Set_a_length(XDecision *InstancePtr, u32 Data);
u32 XDecision_Get_a_length(XDecision *InstancePtr);
void XDecision_Set_v_length(XDecision *InstancePtr, u32 Data);
u32 XDecision_Get_v_length(XDecision *InstancePtr);
void XDecision_Set_data(XDecision *InstancePtr, u32 Data);
u32 XDecision_Get_data(XDecision *InstancePtr);

void XDecision_InterruptGlobalEnable(XDecision *InstancePtr);
void XDecision_InterruptGlobalDisable(XDecision *InstancePtr);
void XDecision_InterruptEnable(XDecision *InstancePtr, u32 Mask);
void XDecision_InterruptDisable(XDecision *InstancePtr, u32 Mask);
void XDecision_InterruptClear(XDecision *InstancePtr, u32 Mask);
u32 XDecision_InterruptGetEnabled(XDecision *InstancePtr);
u32 XDecision_InterruptGetStatus(XDecision *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
