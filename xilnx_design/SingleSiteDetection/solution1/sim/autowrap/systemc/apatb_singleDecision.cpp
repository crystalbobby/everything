// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================


#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;




   #define AUTOTB_TVIN_A_stim_reset  "../tv/cdatafile/c.singleDecision.autotvin_A_stim_reset.dat"
   #define AUTOTB_TVIN_V_stim_reset  "../tv/cdatafile/c.singleDecision.autotvin_V_stim_reset.dat"
   #define AUTOTB_TVIN_set_thresh  "../tv/cdatafile/c.singleDecision.autotvin_set_thresh.dat"
   #define AUTOTB_TVIN_v_thresh  "../tv/cdatafile/c.singleDecision.autotvin_v_thresh.dat"
   #define AUTOTB_TVIN_a_thresh  "../tv/cdatafile/c.singleDecision.autotvin_a_thresh.dat"
   #define AUTOTB_TVIN_a_flip  "../tv/cdatafile/c.singleDecision.autotvin_a_flip.dat"
   #define AUTOTB_TVIN_v_flip  "../tv/cdatafile/c.singleDecision.autotvin_v_flip.dat"
   #define AUTOTB_TVIN_datapoint  "../tv/cdatafile/c.singleDecision.autotvin_datapoint.dat"
   #define AUTOTB_TVOUT_out_r  "../tv/cdatafile/c.singleDecision.autotvout_out_r.dat"
   #define AUTOTB_TVOUT_stim  "../tv/cdatafile/c.singleDecision.autotvout_stim.dat"
   #define INTER_TCL  "../tv/cdatafile/ref.tcl"

   #define AUTOTB_TVOUT_PC_out_r  "../tv/rtldatafile/rtl.singleDecision.autotvout_out_r.dat"
   #define AUTOTB_TVOUT_PC_stim  "../tv/rtldatafile/rtl.singleDecision.autotvout_stim.dat"

class INTER_TCL_FILE {
    public:
//functions
        INTER_TCL_FILE(const char* name) {
            mName = name;
            A_stim_reset_depth = 0;
            V_stim_reset_depth = 0;
            set_thresh_depth = 0;
            v_thresh_depth = 0;
            a_thresh_depth = 0;
            a_flip_depth = 0;
            v_flip_depth = 0;
            datapoint_depth = 0;
            out_r_depth = 0;
            stim_depth = 0;
            trans_num =0;
        }
        ~INTER_TCL_FILE() {
            mFile.open(mName);
            if (!mFile.good() ) {
                cout<<"Failed to open file ref.tcl."<<endl;
                exit (1);
            }
            string total_list = get_depth_list();
            mFile<<"set depth_list {\n";
            mFile<<total_list; 
            mFile<<"}\n";
            mFile<<"set trans_num "<<trans_num<<endl;
            mFile.close();
        }
        string get_depth_list () {
            stringstream total_list;
            total_list<<"   {A_stim_reset "<< A_stim_reset_depth << "}\n";
            total_list<<"   {V_stim_reset "<< V_stim_reset_depth << "}\n";
            total_list<<"   {set_thresh "<< set_thresh_depth << "}\n";
            total_list<<"   {v_thresh "<< v_thresh_depth << "}\n";
            total_list<<"   {a_thresh "<< a_thresh_depth << "}\n";
            total_list<<"   {a_flip "<< a_flip_depth << "}\n";
            total_list<<"   {v_flip "<< v_flip_depth << "}\n";
            total_list<<"   {datapoint "<< datapoint_depth << "}\n";
            total_list<<"   {out_r "<< out_r_depth << "}\n";
            total_list<<"   {stim "<< stim_depth << "}\n";
            return total_list.str();
        }
        void set_num (int num , int* class_num) {
            (*class_num) = (*class_num) > num ? (*class_num) : num;
        }
    public:
//variables
        int A_stim_reset_depth;
        int V_stim_reset_depth;
        int set_thresh_depth;
        int v_thresh_depth;
        int a_thresh_depth;
        int a_flip_depth;
        int v_flip_depth;
        int datapoint_depth;
        int out_r_depth;
        int stim_depth;
        int trans_num;
    private:
        ofstream mFile;
        const char* mName;
};

#define singleDecision AESL_ORIG_DUT_singleDecision
extern void singleDecision ( short A_stim_reset,  short V_stim_reset,  short set_thresh,  int v_thresh,  int a_thresh,  int a_flip,  int v_flip,  short* datapoint,  short* out,  short* stim);
#undef singleDecision
void singleDecision ( short A_stim_reset,  short V_stim_reset,  short set_thresh,  int v_thresh,  int a_thresh,  int a_flip,  int v_flip,  short* datapoint,  short* out,  short* stim) {

    fstream wrapc_switch_file_token;

    wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");

    int AESL_i;

    if (wrapc_switch_file_token.good()) {

        static unsigned AESL_transaction_pc;

        string AESL_token;

        string AESL_num;

        static AESL_FILE_HANDLER aesl_fh;

        aesl_fh.read(AUTOTB_TVOUT_PC_out_r, AESL_token); //[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_out_r, AESL_num); //transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            aesl_fh.read(AUTOTB_TVOUT_PC_out_r, AESL_token); //data

            sc_bv<16> *out_r_pc_buffer = new sc_bv<16>[1];

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'out_r', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'out_r', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    out_r_pc_buffer[i] = AESL_token.c_str();

                    i++;

                }

                aesl_fh.read(AUTOTB_TVOUT_PC_out_r, AESL_token); //data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_out_r)) {

                   exit(1);

                }

            }

            if (i > 0) {

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

                    if((out) != 0) {

                       *(out) = (sc_bv<16>(out_r_pc_buffer[0 + AESL_i].range(15, 0))).to_uint64();

                    }

                    AESL_i++;

                }

                }

            delete [] out_r_pc_buffer;

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_stim, AESL_token); //[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_stim, AESL_num); //transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            aesl_fh.read(AUTOTB_TVOUT_PC_stim, AESL_token); //data

            sc_bv<16> *stim_pc_buffer = new sc_bv<16>[1];

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'stim', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'stim', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    stim_pc_buffer[i] = AESL_token.c_str();

                    i++;

                }

                aesl_fh.read(AUTOTB_TVOUT_PC_stim, AESL_token); //data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_stim)) {

                   exit(1);

                }

            }

            if (i > 0) {

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

                    if((stim) != 0) {

                       *(stim) = (sc_bv<16>(stim_pc_buffer[0 + AESL_i].range(15, 0))).to_uint64();

                    }

                    AESL_i++;

                }

                }

            delete [] stim_pc_buffer;

        }

        AESL_transaction_pc ++ ;

    } else {

        static unsigned AESL_transaction;

        static AESL_FILE_HANDLER aesl_fh;

        char* tvin_A_stim_reset = new char[50];

        char* tvin_V_stim_reset = new char[50];

        char* tvin_set_thresh = new char[50];

        char* tvin_v_thresh = new char[50];

        char* tvin_a_thresh = new char[50];

        char* tvin_a_flip = new char[50];

        char* tvin_v_flip = new char[50];

        char* tvin_datapoint = new char[50];

        char* tvout_out_r = new char[50];

        char* tvout_stim = new char[50];

        static INTER_TCL_FILE tcl_file(INTER_TCL);


        int leading_zero;

        sprintf(tvin_A_stim_reset, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_A_stim_reset, tvin_A_stim_reset);

        sc_bv<16> A_stim_reset_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        A_stim_reset_tvin_wrapc_buffer.range(15, 0) = A_stim_reset;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_A_stim_reset, "%s\n", (A_stim_reset_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_A_stim_reset, tvin_A_stim_reset);

        }

        tcl_file.set_num(1,&tcl_file.A_stim_reset_depth);

        sprintf(tvin_A_stim_reset, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_A_stim_reset, tvin_A_stim_reset);

        sprintf(tvin_V_stim_reset, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_V_stim_reset, tvin_V_stim_reset);

        sc_bv<16> V_stim_reset_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        V_stim_reset_tvin_wrapc_buffer.range(15, 0) = V_stim_reset;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_V_stim_reset, "%s\n", (V_stim_reset_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_V_stim_reset, tvin_V_stim_reset);

        }

        tcl_file.set_num(1,&tcl_file.V_stim_reset_depth);

        sprintf(tvin_V_stim_reset, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_V_stim_reset, tvin_V_stim_reset);

        sprintf(tvin_set_thresh, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_set_thresh, tvin_set_thresh);

        sc_bv<16> set_thresh_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        set_thresh_tvin_wrapc_buffer.range(15, 0) = set_thresh;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_set_thresh, "%s\n", (set_thresh_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_set_thresh, tvin_set_thresh);

        }

        tcl_file.set_num(1,&tcl_file.set_thresh_depth);

        sprintf(tvin_set_thresh, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_set_thresh, tvin_set_thresh);

        sprintf(tvin_v_thresh, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_v_thresh, tvin_v_thresh);

        sc_bv<32> v_thresh_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        v_thresh_tvin_wrapc_buffer.range(31, 0) = v_thresh;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_v_thresh, "%s\n", (v_thresh_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_v_thresh, tvin_v_thresh);

        }

        tcl_file.set_num(1,&tcl_file.v_thresh_depth);

        sprintf(tvin_v_thresh, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_v_thresh, tvin_v_thresh);

        sprintf(tvin_a_thresh, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_a_thresh, tvin_a_thresh);

        sc_bv<32> a_thresh_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        a_thresh_tvin_wrapc_buffer.range(31, 0) = a_thresh;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_a_thresh, "%s\n", (a_thresh_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_a_thresh, tvin_a_thresh);

        }

        tcl_file.set_num(1,&tcl_file.a_thresh_depth);

        sprintf(tvin_a_thresh, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_a_thresh, tvin_a_thresh);

        sprintf(tvin_a_flip, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_a_flip, tvin_a_flip);

        sc_bv<32> a_flip_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        a_flip_tvin_wrapc_buffer.range(31, 0) = a_flip;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_a_flip, "%s\n", (a_flip_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_a_flip, tvin_a_flip);

        }

        tcl_file.set_num(1,&tcl_file.a_flip_depth);

        sprintf(tvin_a_flip, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_a_flip, tvin_a_flip);

        sprintf(tvin_v_flip, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_v_flip, tvin_v_flip);

        sc_bv<32> v_flip_tvin_wrapc_buffer;

        AESL_i = 0; //subscript for rtl array

        v_flip_tvin_wrapc_buffer.range(31, 0) = v_flip;

        AESL_i++;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_v_flip, "%s\n", (v_flip_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_v_flip, tvin_v_flip);

        }

        tcl_file.set_num(1,&tcl_file.v_flip_depth);

        sprintf(tvin_v_flip, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_v_flip, tvin_v_flip);

        sprintf(tvin_datapoint, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_datapoint, tvin_datapoint);

        sc_bv<16> *datapoint_tvin_wrapc_buffer = new sc_bv<16>[1];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

            if((datapoint) != 0) {

               datapoint_tvin_wrapc_buffer[0 + AESL_i].range(15, 0) = *(datapoint);

            }

            AESL_i++;

        }

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_datapoint, "%s\n", (datapoint_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_datapoint, tvin_datapoint);

        }

        tcl_file.set_num(1,&tcl_file.datapoint_depth);

        sprintf(tvin_datapoint, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_datapoint, tvin_datapoint);

        delete [] datapoint_tvin_wrapc_buffer;

        AESL_ORIG_DUT_singleDecision(A_stim_reset,V_stim_reset,set_thresh,v_thresh,a_thresh,a_flip,v_flip,datapoint,out,stim);

        sprintf(tvout_out_r, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVOUT_out_r, tvout_out_r);

        sc_bv<16> *out_r_tvout_wrapc_buffer = new sc_bv<16>[1];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

            if((out) != 0) {

               out_r_tvout_wrapc_buffer[0 + AESL_i].range(15, 0) = *(out);

            }

            AESL_i++;

        }

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvout_out_r, "%s\n", (out_r_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVOUT_out_r, tvout_out_r);

        }

        tcl_file.set_num(1,&tcl_file.out_r_depth);

        sprintf(tvout_out_r, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVOUT_out_r, tvout_out_r);

        delete [] out_r_tvout_wrapc_buffer;

        sprintf(tvout_stim, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVOUT_stim, tvout_stim);

        sc_bv<16> *stim_tvout_wrapc_buffer = new sc_bv<16>[1];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 0 ; i_0+= 1) {

            if((stim) != 0) {

               stim_tvout_wrapc_buffer[0 + AESL_i].range(15, 0) = *(stim);

            }

            AESL_i++;

        }

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvout_stim, "%s\n", (stim_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVOUT_stim, tvout_stim);

        }

        tcl_file.set_num(1,&tcl_file.stim_depth);

        sprintf(tvout_stim, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVOUT_stim, tvout_stim);

        delete [] stim_tvout_wrapc_buffer;

        delete [] tvin_A_stim_reset;

        delete [] tvin_V_stim_reset;

        delete [] tvin_set_thresh;

        delete [] tvin_v_thresh;

        delete [] tvin_a_thresh;

        delete [] tvin_a_flip;

        delete [] tvin_v_flip;

        delete [] tvin_datapoint;

        delete [] tvout_out_r;

        delete [] tvout_stim;

        AESL_transaction++;

        tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);

    }
}


