// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================


#include <iostream>
#include <cstdlib>
#include  "hls_design.h"
#include  "hls_util.h"
using namespace std;
using namespace HLS_Util;





#define singleDecision AESL_ORIG_DUT_singleDecision
extern void singleDecision ( short A_stim_reset,  short V_stim_reset,  short set_thresh,  int v_thresh,  int a_thresh,  int a_flip,  int v_flip,  short* datapoint,  short* out,  short* stim);
#undef singleDecision

void singleDecision ( short A_stim_reset,  short V_stim_reset,  short set_thresh,  int v_thresh,  int a_thresh,  int a_flip,  int v_flip,  short* datapoint,  short* out,  short* stim);
void HLS_Design::run_c_sim() {

    short A_stim_reset;

    short V_stim_reset;

    short set_thresh;

    int v_thresh;

    int a_thresh;

    int a_flip;

    int v_flip;

    short* datapoint = new short;

    short* out = new short;

    short* stim = new short;

    HLS_UINT32 hls_port_index = 0;

    hls_port_index = get_port_index("A_stim_reset");

    A_stim_reset = to_uint64(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    hls_port_index = get_port_index("V_stim_reset");

    V_stim_reset = to_uint64(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    hls_port_index = get_port_index("set_thresh");

    set_thresh = to_uint64(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    hls_port_index = get_port_index("v_thresh");

    v_thresh = to_uint64(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    hls_port_index = get_port_index("a_thresh");

    a_thresh = to_uint64(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    hls_port_index = get_port_index("a_flip");

    a_flip = to_uint64(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    hls_port_index = get_port_index("v_flip");

    v_flip = to_uint64(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    hls_port_index = get_port_index("datapoint");

    *((short *)datapoint) = to_uint64(static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->read_c_value(), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    AESL_ORIG_DUT_singleDecision(A_stim_reset,V_stim_reset,set_thresh,v_thresh,a_thresh,a_flip,v_flip,datapoint,out,stim);

    hls_port_index = get_port_index("out_r");

    HLS_UINT32 apatb_out_r_output[static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num()];

    to_hls_uint32(apatb_out_r_output, *((short *)out), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->write_c_value(apatb_out_r_output);

    hls_port_index = get_port_index("stim");

    HLS_UINT32 apatb_stim_output[static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num()];

    to_hls_uint32(apatb_stim_output, *((short *)stim), static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->get_word_num());

    static_cast<HLS_Data_Port*>(mPorts[hls_port_index])->write_c_value(apatb_stim_output);

    delete datapoint;

    delete out;

    delete stim;
}

