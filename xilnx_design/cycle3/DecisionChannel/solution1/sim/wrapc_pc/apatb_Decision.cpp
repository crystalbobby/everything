// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "reset_A_V"
#define AUTOTB_TVIN_reset_A_V  "../tv/cdatafile/c.Decision.autotvin_reset_A_V.dat"
// wrapc file define: "reset_V_V"
#define AUTOTB_TVIN_reset_V_V  "../tv/cdatafile/c.Decision.autotvin_reset_V_V.dat"
// wrapc file define: "reset_params_V"
#define AUTOTB_TVIN_reset_params_V  "../tv/cdatafile/c.Decision.autotvin_reset_params_V.dat"
// wrapc file define: "athresh"
#define AUTOTB_TVIN_athresh  "../tv/cdatafile/c.Decision.autotvin_athresh.dat"
// wrapc file define: "vthresh"
#define AUTOTB_TVIN_vthresh  "../tv/cdatafile/c.Decision.autotvin_vthresh.dat"
// wrapc file define: "a_flip"
#define AUTOTB_TVIN_a_flip  "../tv/cdatafile/c.Decision.autotvin_a_flip.dat"
// wrapc file define: "v_flip"
#define AUTOTB_TVIN_v_flip  "../tv/cdatafile/c.Decision.autotvin_v_flip.dat"
// wrapc file define: "a_length"
#define AUTOTB_TVIN_a_length  "../tv/cdatafile/c.Decision.autotvin_a_length.dat"
// wrapc file define: "v_length"
#define AUTOTB_TVIN_v_length  "../tv/cdatafile/c.Decision.autotvin_v_length.dat"
// wrapc file define: "data"
#define AUTOTB_TVIN_data  "../tv/cdatafile/c.Decision.autotvin_data.dat"
// wrapc file define: "ap_return"
#define AUTOTB_TVOUT_ap_return  "../tv/cdatafile/c.Decision.autotvout_ap_return.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "ap_return"
#define AUTOTB_TVOUT_PC_ap_return  "../tv/rtldatafile/rtl.Decision.autotvout_ap_return.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			reset_A_V_depth = 0;
			reset_V_V_depth = 0;
			reset_params_V_depth = 0;
			athresh_depth = 0;
			vthresh_depth = 0;
			a_flip_depth = 0;
			v_flip_depth = 0;
			a_length_depth = 0;
			v_length_depth = 0;
			data_depth = 0;
			ap_return_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{reset_A_V " << reset_A_V_depth << "}\n";
			total_list << "{reset_V_V " << reset_V_V_depth << "}\n";
			total_list << "{reset_params_V " << reset_params_V_depth << "}\n";
			total_list << "{athresh " << athresh_depth << "}\n";
			total_list << "{vthresh " << vthresh_depth << "}\n";
			total_list << "{a_flip " << a_flip_depth << "}\n";
			total_list << "{v_flip " << v_flip_depth << "}\n";
			total_list << "{a_length " << a_length_depth << "}\n";
			total_list << "{v_length " << v_length_depth << "}\n";
			total_list << "{data " << data_depth << "}\n";
			total_list << "{ap_return " << ap_return_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int reset_A_V_depth;
		int reset_V_V_depth;
		int reset_params_V_depth;
		int athresh_depth;
		int vthresh_depth;
		int a_flip_depth;
		int v_flip_depth;
		int a_length_depth;
		int v_length_depth;
		int data_depth;
		int ap_return_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};


#define Decision AESL_ORIG_DUT_Decision
extern short Decision (
ap_uint<1> reset_A,
ap_uint<1> reset_V,
ap_uint<1> reset_params,
int athresh,
int vthresh,
char a_flip,
char v_flip,
unsigned int a_length,
unsigned int v_length,
short data);
#undef Decision

short Decision (
ap_uint<1> reset_A,
ap_uint<1> reset_V,
ap_uint<1> reset_params,
int athresh,
int vthresh,
char a_flip,
char v_flip,
unsigned int a_length,
unsigned int v_length,
short data)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;

		short AESL_return;

		// output port post check: "ap_return"
		aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); // data

			sc_bv<16> ap_return_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'ap_return', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'ap_return', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					ap_return_pc_buffer = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_ap_return))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: ap_return
				{
					// bitslice(15, 0)
					// {
						// celement: return(15, 0)
						// {
							sc_lv<16> return_lv0_0_1_0;
						// }
					// }

					// bitslice(15, 0)
					{
						// celement: return(15, 0)
						{
							// carray: (0) => (1) @ (0)
							{
								if (&(AESL_return) != NULL) // check the null address if the c port is array or others
								{
									return_lv0_0_1_0.range(15, 0) = sc_bv<16>(ap_return_pc_buffer.range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						// celement: return(15, 0)
						{
							// carray: (0) => (1) @ (0)
							{
								// sub                    : 
								// ori_name               : AESL_return
								// sub_1st_elem           : 
								// ori_name_1st_elem      : AESL_return
								// output_left_conversion : AESL_return
								// output_type_conversion : (return_lv0_0_1_0).to_uint64()
								if (&(AESL_return) != NULL) // check the null address if the c port is array or others
								{
									AESL_return = (return_lv0_0_1_0).to_uint64();
								}
							}
						}
					}
				}
			}
		}

		AESL_transaction_pc++;

		return AESL_return;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "reset_A_V"
		char* tvin_reset_A_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_reset_A_V);

		// "reset_V_V"
		char* tvin_reset_V_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_reset_V_V);

		// "reset_params_V"
		char* tvin_reset_params_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_reset_params_V);

		// "athresh"
		char* tvin_athresh = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_athresh);

		// "vthresh"
		char* tvin_vthresh = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_vthresh);

		// "a_flip"
		char* tvin_a_flip = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_a_flip);

		// "v_flip"
		char* tvin_v_flip = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_v_flip);

		// "a_length"
		char* tvin_a_length = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_a_length);

		// "v_length"
		char* tvin_v_length = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_v_length);

		// "data"
		char* tvin_data = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_data);

		// "ap_return"
		char* tvout_ap_return = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_ap_return);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_reset_A_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_reset_A_V, tvin_reset_A_V);

		sc_bv<1> reset_A_V_tvin_wrapc_buffer;

		// RTL Name: reset_A_V
		{
			// bitslice(0, 0)
			{
				// celement: reset_A.V(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : reset_A
						// sub_1st_elem          : 
						// ori_name_1st_elem     : reset_A
						// regulate_c_name       : reset_A_V
						// input_type_conversion : (reset_A).to_string(2).c_str()
						if (&(reset_A) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> reset_A_V_tmp_mem;
							reset_A_V_tmp_mem = (reset_A).to_string(2).c_str();
							reset_A_V_tvin_wrapc_buffer.range(0, 0) = reset_A_V_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_reset_A_V, "%s\n", (reset_A_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_reset_A_V, tvin_reset_A_V);
		}

		tcl_file.set_num(1, &tcl_file.reset_A_V_depth);
		sprintf(tvin_reset_A_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_reset_A_V, tvin_reset_A_V);

		// [[transaction]]
		sprintf(tvin_reset_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_reset_V_V, tvin_reset_V_V);

		sc_bv<1> reset_V_V_tvin_wrapc_buffer;

		// RTL Name: reset_V_V
		{
			// bitslice(0, 0)
			{
				// celement: reset_V.V(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : reset_V
						// sub_1st_elem          : 
						// ori_name_1st_elem     : reset_V
						// regulate_c_name       : reset_V_V
						// input_type_conversion : (reset_V).to_string(2).c_str()
						if (&(reset_V) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> reset_V_V_tmp_mem;
							reset_V_V_tmp_mem = (reset_V).to_string(2).c_str();
							reset_V_V_tvin_wrapc_buffer.range(0, 0) = reset_V_V_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_reset_V_V, "%s\n", (reset_V_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_reset_V_V, tvin_reset_V_V);
		}

		tcl_file.set_num(1, &tcl_file.reset_V_V_depth);
		sprintf(tvin_reset_V_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_reset_V_V, tvin_reset_V_V);

		// [[transaction]]
		sprintf(tvin_reset_params_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_reset_params_V, tvin_reset_params_V);

		sc_bv<1> reset_params_V_tvin_wrapc_buffer;

		// RTL Name: reset_params_V
		{
			// bitslice(0, 0)
			{
				// celement: reset_params.V(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : reset_params
						// sub_1st_elem          : 
						// ori_name_1st_elem     : reset_params
						// regulate_c_name       : reset_params_V
						// input_type_conversion : (reset_params).to_string(2).c_str()
						if (&(reset_params) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> reset_params_V_tmp_mem;
							reset_params_V_tmp_mem = (reset_params).to_string(2).c_str();
							reset_params_V_tvin_wrapc_buffer.range(0, 0) = reset_params_V_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_reset_params_V, "%s\n", (reset_params_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_reset_params_V, tvin_reset_params_V);
		}

		tcl_file.set_num(1, &tcl_file.reset_params_V_depth);
		sprintf(tvin_reset_params_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_reset_params_V, tvin_reset_params_V);

		// [[transaction]]
		sprintf(tvin_athresh, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_athresh, tvin_athresh);

		sc_bv<32> athresh_tvin_wrapc_buffer;

		// RTL Name: athresh
		{
			// bitslice(31, 0)
			{
				// celement: athresh(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : athresh
						// sub_1st_elem          : 
						// ori_name_1st_elem     : athresh
						// regulate_c_name       : athresh
						// input_type_conversion : athresh
						if (&(athresh) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> athresh_tmp_mem;
							athresh_tmp_mem = athresh;
							athresh_tvin_wrapc_buffer.range(31, 0) = athresh_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_athresh, "%s\n", (athresh_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_athresh, tvin_athresh);
		}

		tcl_file.set_num(1, &tcl_file.athresh_depth);
		sprintf(tvin_athresh, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_athresh, tvin_athresh);

		// [[transaction]]
		sprintf(tvin_vthresh, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_vthresh, tvin_vthresh);

		sc_bv<32> vthresh_tvin_wrapc_buffer;

		// RTL Name: vthresh
		{
			// bitslice(31, 0)
			{
				// celement: vthresh(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : vthresh
						// sub_1st_elem          : 
						// ori_name_1st_elem     : vthresh
						// regulate_c_name       : vthresh
						// input_type_conversion : vthresh
						if (&(vthresh) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> vthresh_tmp_mem;
							vthresh_tmp_mem = vthresh;
							vthresh_tvin_wrapc_buffer.range(31, 0) = vthresh_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_vthresh, "%s\n", (vthresh_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_vthresh, tvin_vthresh);
		}

		tcl_file.set_num(1, &tcl_file.vthresh_depth);
		sprintf(tvin_vthresh, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_vthresh, tvin_vthresh);

		// [[transaction]]
		sprintf(tvin_a_flip, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_a_flip, tvin_a_flip);

		sc_bv<8> a_flip_tvin_wrapc_buffer;

		// RTL Name: a_flip
		{
			// bitslice(7, 0)
			{
				// celement: a_flip(7, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : a_flip
						// sub_1st_elem          : 
						// ori_name_1st_elem     : a_flip
						// regulate_c_name       : a_flip
						// input_type_conversion : a_flip
						if (&(a_flip) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> a_flip_tmp_mem;
							a_flip_tmp_mem = a_flip;
							a_flip_tvin_wrapc_buffer.range(7, 0) = a_flip_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_a_flip, "%s\n", (a_flip_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_a_flip, tvin_a_flip);
		}

		tcl_file.set_num(1, &tcl_file.a_flip_depth);
		sprintf(tvin_a_flip, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_a_flip, tvin_a_flip);

		// [[transaction]]
		sprintf(tvin_v_flip, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_v_flip, tvin_v_flip);

		sc_bv<8> v_flip_tvin_wrapc_buffer;

		// RTL Name: v_flip
		{
			// bitslice(7, 0)
			{
				// celement: v_flip(7, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : v_flip
						// sub_1st_elem          : 
						// ori_name_1st_elem     : v_flip
						// regulate_c_name       : v_flip
						// input_type_conversion : v_flip
						if (&(v_flip) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> v_flip_tmp_mem;
							v_flip_tmp_mem = v_flip;
							v_flip_tvin_wrapc_buffer.range(7, 0) = v_flip_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_v_flip, "%s\n", (v_flip_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_v_flip, tvin_v_flip);
		}

		tcl_file.set_num(1, &tcl_file.v_flip_depth);
		sprintf(tvin_v_flip, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_v_flip, tvin_v_flip);

		// [[transaction]]
		sprintf(tvin_a_length, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_a_length, tvin_a_length);

		sc_bv<32> a_length_tvin_wrapc_buffer;

		// RTL Name: a_length
		{
			// bitslice(31, 0)
			{
				// celement: a_length(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : a_length
						// sub_1st_elem          : 
						// ori_name_1st_elem     : a_length
						// regulate_c_name       : a_length
						// input_type_conversion : a_length
						if (&(a_length) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> a_length_tmp_mem;
							a_length_tmp_mem = a_length;
							a_length_tvin_wrapc_buffer.range(31, 0) = a_length_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_a_length, "%s\n", (a_length_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_a_length, tvin_a_length);
		}

		tcl_file.set_num(1, &tcl_file.a_length_depth);
		sprintf(tvin_a_length, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_a_length, tvin_a_length);

		// [[transaction]]
		sprintf(tvin_v_length, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_v_length, tvin_v_length);

		sc_bv<32> v_length_tvin_wrapc_buffer;

		// RTL Name: v_length
		{
			// bitslice(31, 0)
			{
				// celement: v_length(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : v_length
						// sub_1st_elem          : 
						// ori_name_1st_elem     : v_length
						// regulate_c_name       : v_length
						// input_type_conversion : v_length
						if (&(v_length) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> v_length_tmp_mem;
							v_length_tmp_mem = v_length;
							v_length_tvin_wrapc_buffer.range(31, 0) = v_length_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_v_length, "%s\n", (v_length_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_v_length, tvin_v_length);
		}

		tcl_file.set_num(1, &tcl_file.v_length_depth);
		sprintf(tvin_v_length, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_v_length, tvin_v_length);

		// [[transaction]]
		sprintf(tvin_data, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_data, tvin_data);

		sc_bv<16> data_tvin_wrapc_buffer;

		// RTL Name: data
		{
			// bitslice(15, 0)
			{
				// celement: data(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : data
						// sub_1st_elem          : 
						// ori_name_1st_elem     : data
						// regulate_c_name       : data
						// input_type_conversion : data
						if (&(data) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> data_tmp_mem;
							data_tmp_mem = data;
							data_tvin_wrapc_buffer.range(15, 0) = data_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_data, "%s\n", (data_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_data, tvin_data);
		}

		tcl_file.set_num(1, &tcl_file.data_depth);
		sprintf(tvin_data, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_data, tvin_data);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		short AESL_return = AESL_ORIG_DUT_Decision(reset_A, reset_V, reset_params, athresh, vthresh, a_flip, v_flip, a_length, v_length, data);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_ap_return, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);

		sc_bv<16> ap_return_tvout_wrapc_buffer;

		// RTL Name: ap_return
		{
			// bitslice(15, 0)
			{
				// celement: return(15, 0)
				{
					// carray: (0) => (1) @ (0)
					{
						// sub                   : 
						// ori_name              : AESL_return
						// sub_1st_elem          : 
						// ori_name_1st_elem     : AESL_return
						// regulate_c_name       : return
						// input_type_conversion : AESL_return
						if (&(AESL_return) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> return_tmp_mem;
							return_tmp_mem = AESL_return;
							ap_return_tvout_wrapc_buffer.range(15, 0) = return_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_ap_return, "%s\n", (ap_return_tvout_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);
		}

		tcl_file.set_num(1, &tcl_file.ap_return_depth);
		sprintf(tvout_ap_return, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "reset_A_V"
		delete [] tvin_reset_A_V;
		// release memory allocation: "reset_V_V"
		delete [] tvin_reset_V_V;
		// release memory allocation: "reset_params_V"
		delete [] tvin_reset_params_V;
		// release memory allocation: "athresh"
		delete [] tvin_athresh;
		// release memory allocation: "vthresh"
		delete [] tvin_vthresh;
		// release memory allocation: "a_flip"
		delete [] tvin_a_flip;
		// release memory allocation: "v_flip"
		delete [] tvin_v_flip;
		// release memory allocation: "a_length"
		delete [] tvin_a_length;
		// release memory allocation: "v_length"
		delete [] tvin_v_length;
		// release memory allocation: "data"
		delete [] tvin_data;
		// release memory allocation: "ap_return"
		delete [] tvout_ap_return;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);

		return AESL_return;
	}
}

